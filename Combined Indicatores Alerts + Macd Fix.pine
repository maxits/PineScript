//@version=4
study("Multi Indicators lined up", overlay=true)

// ================== Input Section

string group1 = "========== Indicators Parameters ========="
source      = input(close, type=input.source,  group=group1, title="Indicator Source for Calculation")
rsiLength   = input(14,    type=input.integer, group=group1, title="RSI Length")
emaLength   = input(200,   type=input.integer, group=group1, title="EMA Length")
fastLen     = input(12,    type=input.integer, group=group1, title="Macd Fast Length")
slowLen     = input(26,    type=input.integer, group=group1, title="Macd Slow Length")
sigLen      = input(9,     type=input.integer, group=group1, title="Signal Length")
i_lenHARSI  = input(14,    type=input.integer, group=group1, title="HARSI Length", minval=1)
i_smoothing = input(7,     type=input.integer, group=group1, title="Open Smoothing", minval=1, maxval=100)
i_source    = input(ohlc4, type=input.source,  group=group1, title="HARSI Source")

// ================== Indicators Functions

rsi = rsi(close, rsiLength)
ema = ema(close, emaLength)
[macdLine, signLine, hist] = macd(close, fastLen, slowLen, sigLen)

// HARSI Calculation

f_zrsi( _source, _length ) => rsi( _source, _length ) - 50

f_zstoch( _source, _length, _smooth, _scale ) =>
    float _zstoch   = stoch( _source, _source, _source, _length) - 50
    float _smoothed = sma( _zstoch, _smooth )
    float _scaled   = ( _smoothed / 100 ) * _scale

f_rsi( _source, _length, _mode ) =>

    float _zrsi = f_zrsi( _source, _length )

    var float _smoothed = na
    _smoothed := na( _smoothed[1] ) ? _zrsi : ( _smoothed[1] + _zrsi ) / 2

    _mode ? _smoothed : _zrsi

f_rsiHeikinAshi( _length ) =>

    float _closeRSI = f_zrsi( close, _length )
    float _openRSI  = nz( _closeRSI[1], _closeRSI )
    float _highRSI_raw  = f_zrsi( high, _length )
    float _lowRSI_raw   = f_zrsi( low, _length )
    float _highRSI  = max( _highRSI_raw, _lowRSI_raw )
    float _lowRSI   = min( _highRSI_raw, _lowRSI_raw )
    float _close    = ( _openRSI + _highRSI + _lowRSI + _closeRSI ) / 4
    var float _open = na
    _open  := na( _open[ i_smoothing ] ) ? ( _openRSI + _closeRSI ) / 2 :
              ( ( _open[1] * i_smoothing ) + _close[1] ) / ( i_smoothing + 1 )
    float _high     = max( _highRSI, max( _open, _close ) )
    float _low      = min( _lowRSI,  min( _open, _close ) )
    [ _open, _high, _low, _close ]

[ O, H, L, C ] = f_rsiHeikinAshi( i_lenHARSI )

// end of HARSI Calculation

// ================== Signals Condition

// Buy Signals
rsiBull    = rsi > 50 
rsiCond    = crossover(rsi, 50)
macdBull   = hist > 0 //and macdLine >= 0 
macdCond   = crossover(hist, 0) //or crossover(macdLine, 0)
emaBull    = close > ema
emaCond    = crossover(close, ema)
harsiBull  = C > O

// Sell Signals
rsiBear    = rsi < 50
rsiCondS   = crossunder(rsi, 50)
macdBear   = hist < 0 //and macdLine <= 0
macdCondS  = crossunder(hist, 0) //or crossunder(macdLine, 0)
emaBear    = close < ema
emaCondS   = crossunder(close, ema)
harsiBear  = C < O 

// Buy Condition
buyCond = rsiBull and macdBull and emaBull and harsiBull and (rsiCond or macdCond or emaCond)// or harsiCond)

// Sell Condition
sellCond = rsiBear and macdBear and emaBear and harsiBear and (rsiCondS or macdCondS or emaCondS)// or harsiCondS)

plotshape(buyCond,  color=color.green, style=shape.circle, location=location.bottom, size=size.tiny)
plotshape(sellCond, color=color.red,   style=shape.circle, location=location.bottom, size=size.tiny)

if buyCond
    alert(message="Buy Condition", freq=alert.freq_once_per_bar_close)
if sellCond
    alert(message="Sell Condition", freq=alert.freq_once_per_bar_close)