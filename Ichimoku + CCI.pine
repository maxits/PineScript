//@version=5
strategy("Ichimoku + CCI", overlay=true, initial_capital=10000)

mintick       = syminfo.mintick
id            = syminfo.tickerid
number        = "#.##"

inPosition    = strategy.position_size != 0 
noPosition    = strategy.position_size == 0 
longPosition  = strategy.position_size >  0 
shortPosition = strategy.position_size <  0
positionPrice = strategy.position_avg_price 
newPosition   = strategy.closedtrades > strategy.closedtrades


// ----------------------------- Group Strings Section
//{
group0 = "Strategy Settings"
group1 = "Risk Management"
group2 = "Ichimoku Settings"
group3 = "CCI Settings" 
group4 = "Pine Connector Settings" 
group5 = "Visual Settings"


// ----------------------------- End of Group Strings Section 
//}

// ----------------------------- Input Section
//{

// Visual Settings

//[
plotlabel  = input.bool(defval=true, group=group5, title="Plot Labels?")
labeldist  = input.int (defval=5,    group=group5, title="Label Plotting Distance From bar") / mintick
plotbg     = input.bool(false,       group=group5, title="Plot Background Color on Time Session?")
bgcolor    = input.color(#c8e6c9,    group=group5, title="Background Color")
plotTarget = input.bool(true,        group=group5, title="Plot Targets on Chart")
//]

// Strategy Settings
//[
monday       = input.string("Not a Trading Day", group=group0, title="Trading Day",   options=["Not a Trading Day", "Monday"])
tuesday      = input.string("Tuesday",           group=group0, title="Trading Day",   options=["Not a Trading Day", "Tuesday"])
wednesday    = input.string("Wednesday",         group=group0, title="Trading Day",   options=["Not a Trading Day", "Wednesday"])
thursday     = input.string("Thursday",          group=group0, title="Trading Day",   options=["Not a Trading Day", "Thursday"])
friday       = input.string("Friday",            group=group0, title="Trading Day",   options=["Not a Trading Day", "Friday"])
tradeHours   = input.session("0930-1000",        group=group0, title="Trading Hours", tooltip="UTC - 4")
sendAlerts   = input.bool(defval=true,           group=group0, title="Send Alerts?")
//]

// Risk Management Parameters
//[

enabletpsl  = input.bool (defval=false, group=group1, title="Enable TP and SL in Pips?")
pc_limit    = input.bool (defval=true,  group=group1, title="Use Limit Order?",        tooltip="If true a limit order will be used, if false a market order will be used")
b_s_limit   = input.int  (defval=5,     group=group1, title ="Buy/Sell Limit in Pips", tooltip="If Limit orders are enable, it place the order this amount of pips from the trigger", minval = 1)
pc_risk     = input.float(minval=0, maxval=100,  step=1, defval=3,                 group=group1, title="Risk", tooltip="This is how much to risk per trade in Meta Trader")
profitPip   = input.int  (minval=1, maxval=1000, step=1, defval=30, confirm=false, group=group1, title="Profit Target in Pips") / mintick
slossPip    = input.int  (minval=1, maxval=1000, step=1, defval=15, confirm=false, group=group1, title="Stop Loss in Pips") / mintick
trailtrig   = input.int  (minval=1, maxval=1000, step=1, defval=10, confirm=false, group=group1, title="Trailing Stop Trigger",  tooltip="Trailing stop-loss will be activated after a trade gains this number of pips. ") / mintick
traildist   = input.int  (minval=1, maxval=1000, step=1, defval=1,  confirm=false, group=group1, title="Trailing Stop Distance", tooltip="Distance of the trailing stop-loss from current price. SL will be opened at traildist, after trailtrig is met, even if you do not have a SL placed. ") / mintick
trailstep   = input.int  (minval=1, maxval=1000, step=1, defval=1,  confirm=false, group=group1, title="Trailing Stop Step",     tooltip="Moves trailing stop-loss once price moves favourable by a specified number of pips.") / mintick

notenable   = "If not enable targets in pips, are enable target in percentage"

firstTarget = input.float(minval=0.01, maxval=100,  step=0.1, defval=0.5, group=notenable, title="First Target %",       tooltip="First target in percentage of price")/100
secTarget   = input.float(minval=0.01, maxval=100,  step=0.1, defval=1,   group=notenable, title="Second Target %",      tooltip="Second target in percentage of price")/100
enableTS    = input.bool (defval=false,                                   group=notenable, title="Enable Trailing Stop", tooltip="Enable Traling Stop Loss once price moves 0.5% in favour")
trailoffset = input.int  (minval=1,    maxval=1000, step=1,   defval=1,   group=notenable, title="Trailing Stop off set",tooltip="Moves trailing stop-loss once price moves favourable by a specified number of pips.") / mintick
//]


// Indicator Settings
//[
ichimTF             = input.timeframe("5", group=group2, title="Ichimoku Line Time Frame")
conversionPeriods   = input.int(9,         group=group2, title="Conversion Periods"   )
basePeriods         = input.int(26,        group=group2, title="Base Periods")
laggingSpan2Periods = input.int(52,        group=group2, title="Lagging Span 2 Periods")
displacement        = input.int(26,        group=group2, title="Displacement")
plotTenkan          = input.bool(false,    group=group2, title="Plot Tenkan?")
plotKijun           = input.bool(true,     group=group2, title="Plot Kijun?")
plotxChikou         = input.bool(false,    group=group2, title="Plot xChikou?")
plotSenkouA         = input.bool(false,    group=group2, title="Plot SenkouA?")
plotSenkouB         = input.bool(false,    group=group2, title="Plot SenkouB?")

cciTFentries        = input.timeframe(title ="CCI Time Frame for trade trigger", group=group3, defval= "",  tooltip="This is the Time Frame to consider the signals for Trade Entry")
ccifilteroption     = input.bool     (title ="Use CCI as a filter for signals?", group=group3, defval=false)
cciTFfilter         = input.timeframe(title ="CCI Time Frame for trade filter" , group=group3, defval= "5", tooltip="This is the Time Frame to filter trades")
ccifiltervalue      = input.int      (title ="CCI Filter Value",                 group=group3, defval=50, minval=1, tooltip="CCI should be out of this value to consider the trade (+/-)")
len                 = input.int      (title ="CCI Length",                       group=group3, defval=22, minval=1)
src                 = input.source   (title ="CCI Source",                       group=group3, defval=hlc3)
typeMA              = input.string   (title ="Method",                           group=group3, defval="SMA", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"])
smoothingLength     = input.int      (title ="Length",                           group=group3, defval=5, minval = 1, maxval = 100)
plotcci             = input.bool     (title ="Plot CCI?",                        group=group3, defval=false)
cciCrossLong        = input.int      (title ="CCI cross value for long signal",  group=group3, defval=100,  step=1, tooltip="Cross 1 min CCI value to send Signals")
cciCrossShort       = input.int      (title ="CCI cross value for short signal", group=group3, defval=-100, step=1, tooltip="Cross 1 min CCI value to send Signals")
cciCheckValueLong   = input.int      (title ="CCI check value for long signal",  group=group3, defval=150,  step=1, tooltip="Check 5 min CCI value to set profit in percentage for Longs")
cciCheckValueShort  = input.int      (title ="CCI check value for short signal", group=group3, defval=-150, step=1, tooltip="Check 5 min CCI value to set profit in percentage for Shorts")
//]

// Pine Connector Settings
//[
pc_id      = input.string(title="License ID",              defval="5510492750007", group=group4, tooltip="This is your PineConnector license ID")
pc_prefix  = input.string(title="MetaTrader Prefix",       defval="",              group=group4, tooltip="This is your broker's MetaTrader symbol prefix")
pc_suffix  = input.string(title="MetaTrader Suffix",       defval="",              group=group4, tooltip="This is your broker's MetaTrader symbol suffix")

//]
// ----------------------------- End of Input Section
//}

// ----------------------------- Indicators Sections
//{
// CCI Code

//[

ma    = ta.sma(src, len)
cci   = (src - ma) / (0.015 * ta.dev(src, len))

maa(source, len, type) =>
    switch type
        "SMA"         => ta.sma (source, len)
        "EMA"         => ta.ema (source, len)
        "SMMA (RMA)"  => ta.rma (source, len)
        "WMA"         => ta.wma (source, len)
        "VWMA"        => ta.vwma(source, len)

smoothingLine = maa(cci, smoothingLength, typeMA)

cciEntries    = request.security(id, cciTFentries, cci)
cciFilter     = request.security(id, cciTFfilter,  cci)
//]

// Ichimoku Code
//[
middleDonchian(Length) =>
    lower = ta.lowest(Length)
    upper = ta.highest(Length)
    math.avg(upper, lower)
    
Tenkan  = middleDonchian(conversionPeriods)
Kijun   = middleDonchian(basePeriods)
xChikou = close
SenkouA = middleDonchian(laggingSpan2Periods)
SenkouB = (Tenkan[basePeriods] + Kijun[basePeriods]) / 2

TenkanTF  = request.security(id, ichimTF, Tenkan)
KijunTF   = request.security(id, ichimTF, Kijun)
xChikouTF = request.security(id, ichimTF, xChikou)
SenkouATF = request.security(id, ichimTF, SenkouA)
SenkouBTF = request.security(id, ichimTF, SenkouB)
//]

// ----------------------------- End Indicators Sections
//}


// ----------------------------- Alerts + Pine Connector Section
//{
var symbol = pc_prefix + syminfo.ticker + pc_suffix
var limit  = pc_limit  ? "limit" : ""
var price  = pc_limit  ? "price=" + str.tostring(close) + "," : ""

pc_entry_alert(direction, price, sl, tp) =>
    if pc_limit and enabletpsl
        pc_id + "," + direction + "," + symbol + "," + "price=" +  str.tostring(b_s_limit) + "," + "sl=" + 
         str.tostring(sl*mintick, '#') + ",tp=" + str.tostring(tp*mintick, '#') + ",trailtrig="+str.tostring(trailtrig*mintick) + 
         ",traildist="+str.tostring(traildist*mintick) + ",trailstep="+str.tostring(trailstep*mintick) + ",risk=" + str.tostring(pc_risk)
    else
        if enabletpsl
            pc_id + "," + direction + "," + symbol + "," + "sl=" + str.tostring(sl*mintick, '#') + ",tp=" + 
             str.tostring(tp*mintick, '#') + ",trailtrig="+str.tostring(trailtrig*mintick) + ",traildist="+str.tostring(traildist*mintick) + 
             ",trailstep=" + str.tostring(trailstep*mintick) + ",risk=" + str.tostring(pc_risk)
        else
            if pc_limit and not enabletpsl
                pc_id + "," + direction + "," + symbol + "," + "price=" +  str.tostring(b_s_limit) 
                 + ",trailtrig="+str.tostring(trailtrig*mintick) + ",traildist="+str.tostring(traildist*mintick) + 
                 ",trailstep="+str.tostring(trailstep*mintick) + ",risk=" + str.tostring(pc_risk)
            else 
                if not enabletpsl
                    pc_id + "," + direction + "," + symbol + "," + "trailtrig="+str.tostring(trailtrig*mintick) + 
                     ",traildist="+str.tostring(traildist*mintick) + ",trailstep=" + str.tostring(trailstep*mintick) + 
                     ",risk=" + str.tostring(pc_risk)
                     
pc_exit_alert(direction) =>
    if not enabletpsl
        pc_id + "," + direction + "," + symbol 

pc_exit_alert_new(direction, tpn) =>
    if not enabletpsl
        pc_id + "," + direction + "," + symbol + "," + "tp=" + str.tostring(tpn, format.mintick)

pc_exit_alert_newSL(direction, sln) =>
    if not enabletpsl
        pc_id + "," + direction + "," + symbol + "," + "sl=" + str.tostring(sln, format.mintick)

// ----------------------------- End of Alerts + Pine Connector Section
//}

// ----------------------------- Logic Section
//{


// Week Days
//[
i_monday    = monday    == "Monday"    and dayofweek == dayofweek.monday
i_tuesday   = tuesday   == "Tuesday"   and dayofweek == dayofweek.tuesday
i_wednesday = wednesday == "Wednesday" and dayofweek == dayofweek.wednesday
i_thursday  = thursday  == "Thursday"  and dayofweek == dayofweek.thursday 
i_friday    = friday    == "Friday"    and dayofweek == dayofweek.friday

dayOfWeek = i_monday or i_tuesday or i_wednesday or i_thursday or i_friday
InSession(sess) => na(time(timeframe.period, sess)) == false
tradeCondition = InSession(tradeHours) and dayOfWeek
bgcolor(color = plotbg and tradeCondition ? bgcolor : na, title="Session test")
//]

//
//[
// Targets calculation

stopLoss    = slossPip  * mintick
longprofit  = positionPrice + profitPip * mintick
longStop    = positionPrice - slossPip  * mintick
shortprofit = positionPrice - profitPip * mintick
shortStop   = positionPrice + slossPip  * mintick

dist         = 0.0
multip       = 0
var_high     = 0.0
max_high     = 0.0
l_var_trail  = 0.0
l_trail_stop = 0.0

reachFirstTarget = false

if longPosition
    var_high := high
    max_high := math.max(max_high[1], var_high)
    l_var_trail := longStop
    if max_high > positionPrice[1] + trailtrig[1] * mintick
        dist := (max_high - (positionPrice + trailtrig * mintick)) / mintick
        multip := int(dist / traildist) 
        l_var_trail := longStop + trailstep * multip * mintick
    else
        na
    reachFirstTarget := max_high > positionPrice*(1+firstTarget)     
    if  reachFirstTarget
        l_trail_stop := max_high - trailoffset * mintick
    else 
        na
else 
    na
    

var_low      = 0.0
min_low      = 9999999.99
s_var_trail  = 0.0
s_trail_stop = 0.0

if shortPosition
    var_low := low
    min_low := math.min(min_low[1], var_low)
    s_var_trail := shortStop
    if min_low < positionPrice[1] - trailtrig[1] * mintick
        dist := ((positionPrice - trailtrig * mintick) - min_low) / mintick
        multip := int(dist / traildist)
        s_var_trail := shortStop - trailstep * multip * mintick
    else
        na
    reachFirstTarget := min_low < positionPrice*(1-firstTarget)     
    if  reachFirstTarget
        s_trail_stop := min_low + trailoffset * mintick
    else 
        na
else 
    na        
//]

// Entry Conditions
// [

longCCIfilter  = if ccifilteroption 
    if (cciFilter >  ccifiltervalue)
        true
    else
        false
else 
    true
    
shortCCIfilter = if ccifilteroption 
    if (cciFilter < -ccifiltervalue)
        true
    else
        false
else
    true

longCondition   = (close[1] < KijunTF and high > KijunTF)  and ta.crossover (cciEntries,cciCrossLong)  and tradeCondition and longCCIfilter 
shortCondition  = (close[1] > KijunTF and low  < KijunTF)  and ta.crossunder(cciEntries,cciCrossShort) and tradeCondition and shortCCIfilter

stopLossCCI     = ta.cross(cciEntries, 0)

exitlongProfit  = if longPosition 
    if ((max_high - positionPrice) / positionPrice) >= firstTarget 
        if cciFilter < cciCheckValueLong 
            firstTarget
        else
            secTarget
    else
        99999999
else 
    99999999

changeLongProfit = ta.change(exitlongProfit)

exitshortProfit = if shortPosition 
    if ((positionPrice - min_low)  / positionPrice) >= firstTarget 
        if cciFilter > cciCheckValueShort 
            firstTarget
        else
            secTarget
    else    
        0.9999999
else 
    0.9999999

changeShortProfit = ta.change(exitshortProfit)

if longCondition
    if pc_limit
        strategy.entry("long", strategy.long, limit=close - b_s_limit)
        alert_string = pc_entry_alert("buy" + limit, price, slossPip, profitPip)
        alert(alert_string, alert.freq_once_per_bar_close)
        a_label = plotlabel ? label.new(bar_index, high + 
         labeldist, text=alert_string, textcolor=color.new(color.white, 0), 
         color=color.new(color.green, 0) ) : na
    else
        strategy.entry("long", strategy.long)
        alert_string = pc_entry_alert("buy" + limit, price, slossPip, profitPip)
        alert(alert_string, alert.freq_once_per_bar_close)
        a_label = plotlabel ? label.new(bar_index, high + 
         labeldist, text=alert_string, textcolor=color.new(color.white, 0), 
         color=color.new(color.green, 0) ) : na
    
trailprice = 0.0
newsl      = 0.0

if enabletpsl and longPosition
    strategy.exit("exit long 1", from_entry="long", trail_points=trailtrig, trail_offset=(max_high - l_var_trail) / mintick, profit=profitPip, loss=slossPip)
else 
    if stopLossCCI and longPosition and not enableTS
        strategy.close("long")
        alert_string = pc_exit_alert("closelong")
        alert(alert_string, alert.freq_once_per_bar_close)
        a_label = plotlabel ? label.new(bar_index, high + 
         labeldist, text=alert_string, textcolor=color.new(color.white, 0), 
         color=color.new(color.green, 0) ) : na
    else
        if longPosition and changeLongProfit and not enableTS
            strategy.exit("exit long 3", from_entry="long", limit=positionPrice*(1+exitlongProfit))
            newtp = (positionPrice*(1+exitlongProfit) - positionPrice) 
            alert_string = positionPrice*(1+exitlongProfit) < 5*close ? pc_exit_alert_new("newsltplong", newtp) : "" 
            alert(alert_string, alert.freq_once_per_bar_close)
            a_label = plotlabel and alert_string != "" ? label.new(bar_index, high + 
             labeldist, text=alert_string, textcolor=color.new(color.white, 0), 
             color=color.new(color.green, 0) ) : na
        else
            if longPosition and enableTS and stopLossCCI
                strategy.close("long")
                alert_string = pc_exit_alert("closelong")
                alert(alert_string, alert.freq_once_per_bar_close)
                a_label = plotlabel ? label.new(bar_index, high + 
                 labeldist, text=alert_string, textcolor=color.new(color.white, 0), 
                 color=color.new(color.green, 0) ) : na
            else
                if longPosition and enableTS
                    trailprice:=positionPrice*(1+firstTarget)
                    strategy.exit("exit long 4", from_entry="long", trail_price=trailprice, trail_offset=trailoffset)
                    newsl := (l_trail_stop - positionPrice) 
                    alert_string = newsl != newsl[1] ? pc_exit_alert_newSL("newsltplong", newsl) : "" 
                    alert(alert_string, alert.freq_once_per_bar_close)
                    a_label = plotlabel and alert_string != "" ? label.new(bar_index, high + 
                     labeldist, text=alert_string, textcolor=color.new(color.white, 0), 
                     color=color.new(color.green, 0) ) : na
plot(newsl,"newsl")  

if shortCondition
    if pc_limit
        strategy.entry("short", strategy.short, limit=close + b_s_limit)
        alert_string = pc_entry_alert("sell" + limit, price, slossPip, profitPip)
        alert(alert_string, alert.freq_once_per_bar_close)
        a_label = plotlabel ? label.new(bar_index, high + 
         labeldist, text=alert_string, textcolor=color.new(color.white, 0), 
         color=color.new(color.red, 0) ) : na
    else
        strategy.entry("short", strategy.short)
        alert_string = pc_entry_alert("sell" + limit, price, slossPip, profitPip)
        alert(alert_string, alert.freq_once_per_bar_close)
        a_label = plotlabel ? label.new(bar_index, high + 
         labeldist, text=alert_string, textcolor=color.new(color.white, 0),
         color=color.new(color.red, 0) ) : na
    
if enabletpsl and shortPosition
    strategy.exit("exit short 1", from_entry="short", trail_points=trailtrig, trail_offset=(s_var_trail - min_low) / mintick, profit=profitPip, loss=slossPip)
else 
    if stopLossCCI and shortPosition
        strategy.close("short")
        alert_string = pc_exit_alert("closeshort")
        alert(alert_string, alert.freq_once_per_bar_close)
        a_label = plotlabel ? label.new(bar_index, high + 
         labeldist, text=alert_string, textcolor=color.new(color.white, 0), 
         color=color.new(color.red, 0) ) : na
    else
        if shortPosition and changeShortProfit 
            strategy.exit("exit short 3", from_entry="short", limit=positionPrice*(1-exitshortProfit)) // cerca de 0
            newtp1 = (positionPrice - positionPrice*(1-exitshortProfit)) // muy grande
            alert_string = newtp1 < close/5 ? pc_exit_alert_new("newsltpshort", newtp1) : "" // 
            alert(alert_string, alert.freq_once_per_bar_close)
            a_label = plotlabel and alert_string != "" ? label.new(bar_index, high + 
             labeldist, text=alert_string, textcolor=color.new(color.white, 0), 
             color=color.new(color.red, 0) ) : na
        else
            if shortPosition and enableTS and stopLossCCI
                strategy.close("short")
                alert_string = pc_exit_alert("closeshort")
                alert(alert_string, alert.freq_once_per_bar_close)
                a_label = plotlabel ? label.new(bar_index, high + 
                 labeldist, text=alert_string, textcolor=color.new(color.white, 0), 
                 color=color.new(color.red, 0) ) : na
            else
                if shortPosition and enableTS
                    trailprice:=positionPrice*(1-firstTarget)
                    strategy.exit("exit short 4", from_entry="short", trail_price=trailprice, trail_offset=trailoffset)
                    newsl := (positionPrice - s_trail_stop) 
                    alert_string = newsl != newsl[1] ? pc_exit_alert_newSL("newsltplong", newsl) : "" 
                    alert(alert_string, alert.freq_once_per_bar_close)
                    a_label = plotlabel and alert_string != "" ? label.new(bar_index, high + 
                     labeldist, text=alert_string, textcolor=color.new(color.white, 0), 
                     color=color.new(color.green, 0) ) : na

//]


// ----------------------------- End of Logic Section
//}


// ----------------------------- Plotting Section
////{
plot(smoothingLine, title="Smoothing Line", color=#f37f20, display=display.none)
plot(plotTenkan      ? TenkanTF                : na, color=color.blue,   title="Tenkan")
plot(plotKijun       ? KijunTF                 : na, color=color.red,    title="Kijun")
plot(plotxChikou     ? xChikouTF               : na, color=color.teal ,  title="Chikou", offset = -displacement)
A = plot(plotSenkouA ? SenkouATF[displacement] : na, color=color.purple, title="SenkouA")
B = plot(plotSenkouB ? SenkouBTF               : na, color=color.green,  title="SenkouB")

band1  = hline(100,  "Upper Band", color= plotcci ? #787B86 : #00000000, linestyle=hline.style_dashed, display=display.none)
band0  = hline(-100, "Lower Band", color= plotcci ? #787B86 : #00000000, linestyle=hline.style_dashed, display=display.none)
middle = hline(0,   "Middle Band", color= plotcci ? color.new(#787B86, 50) : #00000000, display=display.none)
fill(A, B, color=color.green)
plot(plotcci ? cciEntries : na, "CCI", color=color.red)
plot(plotcci ? cciFilter  : na, "CCI", color=color.blue)

plot(enabletpsl and plotTarget and longPosition  ? longprofit  : na, title="Long Profit",    color=color.new(color.lime, 0), linewidth=2, style=plot.style_linebr)
plot(enabletpsl and plotTarget and longPosition  ? l_var_trail : na, title="Long Stop Loss", color=color.new(color.red, 0),  linewidth=2, style=plot.style_linebr)
plot(enabletpsl and plotTarget and longPosition  ? positionPrice + trailtrig * mintick : na, title="Long TrailTrig", color=color.new(color.blue, 0), linewidth=2, style=plot.style_linebr)
plot(enableTS   and plotTarget and longPosition  ? positionPrice*(1+firstTarget)       : na, title="Long TrailTrig", color=color.new(color.blue, 0), linewidth=2, style=plot.style_linebr)
plot(enableTS   and plotTarget and longPosition  and reachFirstTarget ? l_trail_stop   : na, title="Long TrailStep", color=color.new(color.red, 0),  linewidth=2, style=plot.style_linebr)


plot(enabletpsl and plotTarget and shortPosition ? shortprofit : na, title="Short Profit",    color=color.new(color.lime, 0), linewidth=2, style=plot.style_linebr)
plot(enabletpsl and plotTarget and shortPosition ? s_var_trail : na, title="Short Stop Loss", color=color.new(color.red, 0),  linewidth=2, style=plot.style_linebr)
plot(enabletpsl and plotTarget and shortPosition ? positionPrice - trailtrig * mintick : na,  title="Short TrailTrig", color=color.new(color.blue, 0), linewidth=2, style=plot.style_linebr)
plot(enableTS   and plotTarget and shortPosition ? positionPrice*(1-firstTarget)       : na,  title="Short TrailTrig", color=color.new(color.blue, 0), linewidth=2, style=plot.style_linebr) 
plot(enableTS   and plotTarget and shortPosition  and reachFirstTarget ? s_trail_stop  : na,  title="Short TrailStep", color=color.new(color.red, 0),  linewidth=2, style=plot.style_linebr) 


// ----------------------------- End of Plotting Section
//}