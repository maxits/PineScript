//@version=4

// Estrategia Completa ADX + Squeeze Momentum
// La estrategia cuenta con señales de compra (longs) y venta (shorts) cuando ambos indicadores
// sincronicen sus respectivas señales. Para el cierre de las operaciones hay varias alternativas,
// que pueden activarse o desactivarse desde configuración o Inputs.
//     - Take Profit, Stop Loss, Trailing Stop Loss: Valores porcentuales desde el precio de entrada
//     - Cruce del Indicador ADX con las lineas +DI y -DI, o cruce entre estas 2 lineas
//     - Cambio de la pendiente del ADX
// (Si estas opciones no se activan, la salida de la operacion sera la operación inversa)

// Compra (long):
//     - Indicador ADX: 
//         - Linea +DI esta por encima de -DI, y el ADX cruza por encima de la linea -DI
//     - Indicador Squeeze Momentum 
//         - Cambio de color (de rojo a verde) (valores crecientes del indicador)
        
// Venta (short):
//     - Indicador ADX: 
//         - Linea -DI esta por encima de +DI, y el ADX cruza por encima de la linea +DI
//     - Indicador Squeeze Momentum 
//         - Cambio de color (de verde a rojo) (valores decrecientes del indicador)

// Para visualizar correctamente los indicadores y poder chequear el funcionamiento de la estrategia,
// en la parte de strategy() al inicio del código, poner overlay=false (por defecto)
// En caso de querer visualizar los target de profit y stop loss, poner overlay=true, y click en
// Add to Chart (en la parte de arriba a la derecha de la seccion Pine Editor)
// En caso de hacer esto destildar las casillas de Mostrar ADX y Squeeze Momentum en Input
// Tambien sera necesario borrar el indicador que quedo en su ventana.
// Para volver a tener el indicador en su ventana, realizar el paso contrario, colocando overlay=false
    
strategy(title="ADX and Squeeze Momentum Strategy",
         shorttitle="ADX + Squeeze",
         overlay=false,
         initial_capital=1000,
         default_qty_value=100,
         default_qty_type=strategy.percent_of_equity,
         commission_value=0.1,
         pyramiding=0
         )
         
// Inputs
sep1          = input(false, title="========= General Inputs =========")
plotlabel     = input(true,  title="Mostrar Carteles en Gráfico?")
dist          = input(50,    title="Distancia del Label al indicador")
plotSQoffset  = input(0,     title="Offset para visualizar mejor el Squeeze")
plotADXoffset = input(0,     title="Offset para visualizar mejor ADX")
plottargets   = input(false, title="Mostrar Profit y S. Loss en gráfica")

sep2          = input(false, title="========= ADX Inputs =========")
plotadx       = input(true,  title="Plot ADX?")
adxlen        = input(14,    title="ADX Smoothing")
dilen         = input(14,    title="DI Length")
keyLevel      = input(23,    title="key level for ADX")

sep3          = input(false, title="========= Squeeze Momentum Inputs =========")
plotSM        = input(true,  title="Plot Squeeze Momentum?")
length        = input(20,    title="BB Length")
mult          = input(2.0,   title="BB MultFactor")
lengthKC      = input(20,    title="KC Length")
multKC        = input(1.5,   title="KC MultFactor")
useTrueRange  = input(true,  title="Use TrueRange (KC)")

sep4          = input(false, title="========= Configuración de la Estrategia =========")
ADX_exit      = input(false, title="Cierre por Giro de ADX")
SM_exit       = input(false, title="Cierre por Cambio de color de Squeeze Momentum")
up_down_exit  = input(false, title="Cierre Por Cruce de ADX con +DI o -DI")
enable_TP     = input(false, title="Habilitar Profit?")
enable_SL     = input(false, title="Habilitar S.Loss?")
enable_TS     = input(false, title="Habilitar Trailing Stop?")
long_TP_Input = input(30.0,  title='Long Take Profit %',      type=input.float, minval=0)/100
long_SL_Input = input(10.0,  title='Long Stop Loss %',        type=input.float, minval=0)/100
long_TS_Input = input(5.0,   title='Long Trailing Stop %',    type=input.float, minval=0)/100
sho_TP_Input  = input(30.0,  title='Short Take Profit %',     type=input.float, minval=0)/100
sho_SL_Input  = input(10.0,  title='Short Stop Loss %',       type=input.float, minval=0)/100
sho_TS_Input  = input(5.0,   title='Short Trailing Stop %',   type=input.float, minval=0)/100


//=============  Cálculo de ADX ============= 

dirmov(len) =>
	up    =  change(high)
	down  = -change(low)
	truerange = rma(tr, len)
	plus  = fixnan(100 * rma(up   > down and up   > 0 ? up   : 0, len) / truerange)
	minus = fixnan(100 * rma(down > up   and down > 0 ? down : 0, len) / truerange)
	[plus, minus]

adx(dilen, adxlen) => 
	[plus, minus] = dirmov(dilen)
	sum = plus + minus
	adx = 100 * rma(abs(plus - minus) / (sum == 0 ? 1 : sum), adxlen)
	[adx, plus, minus]

[sig, up, down] = adx(dilen, adxlen)

h_sig = highest(sig, 500)
l_sig = lowest (sig, 500)
norm_sig = (sig / (h_sig - l_sig) ) * 100

h_up = highest(up, 500)
l_up = lowest (up, 500)
norm_up = (up / (h_up - l_up) ) * 100

h_down = highest(sig, 500)
l_down = lowest (sig, 500)
norm_down =(down / (h_down - l_down) ) * 100

plot(plotadx ? norm_sig + plotADXoffset : na, color=color.new(color.orange, 0), title="ADX", linewidth=2)
plot(plotadx ? norm_up : na, color=color.new(color.blue,  0), title="+DI", display=display.none)
plot(plotadx ? norm_down : na, color=color.new(color.gray,  0), title="-DI", display=display.none)
plot(plotadx ? keyLevel : na, color=color.new(color.white, 0), title="Key Level")

// plot(plotadx ? sig + plotADXoffset : na, color=color.new(color.orange, 0), title="ADX", linewidth=2)
// plot(plotadx ? up : na, color=color.new(color.blue,  0), title="+DI")
// plot(plotadx ? down : na, color=color.new(color.gray,  0), title="-DI")
// plot(plotadx ? keyLevel : na, color=color.new(color.white, 0), title="Key Level")


//============= Cálculo de Lazy Bear (Squeeze Momentum) ============= 

// Calculate BB
source  = close
basis   = sma(source, length)
dev     = multKC * stdev(source, length)
upperBB = basis  + dev
lowerBB = basis  - dev

// Calculate KC
ma      = sma(source, lengthKC)
range   = useTrueRange ? tr : (high - low)
rangema = sma(range, lengthKC)
upperKC = ma + rangema * multKC
lowerKC = ma - rangema * multKC

sqzOn   = (lowerBB > lowerKC) and (upperBB < upperKC)
sqzOff  = (lowerBB < lowerKC) and (upperBB > upperKC)
noSqz   = (sqzOn == false) and (sqzOff == false)

val     = linreg(source  -  avg(avg(highest(high, lengthKC), lowest(low, lengthKC)),sma(close,lengthKC)), lengthKC,0)

bcolor  = iff( val > 0,
         iff( val > nz(val[1]), color.new(color.lime, 0), color.new(color.red, 0)),
         iff( val < nz(val[1]), color.new(color.red, 0), color.new(color.lime, 0)))
scolor  = noSqz ? color.new(color.blue, 0) : sqzOn ? color.new(color.black, 0) : color.new(color.gray, 0) 

h_val = highest(val, 500)
l_val = lowest (val, 500)
norm_val = (val / (h_val - l_val) ) * 100

plot(plotSM ? norm_val + plotSQoffset : na, color=bcolor, style=plot.style_histogram, linewidth=4, title="Squeeze Momentum")

//============= Lógica de Entrada y Salida ============= 

// Señal de Compra ADX
buycond  = up > down and sig > down
sellcond = up < down and sig > up

buycross  = (crossover (up, down) and sig > down) or (up > down and crossover (sig, down))
sellcross = (crossunder(up, down) and sig > up)   or (up < down and crossunder(sig, up))

exitbuy  = up < down or sig < down
exitsell = up > down or sig < up

// Giro de ADX
ADX_UP   = sig > sig[1]
ADX_DOWN = sig < sig[1]

giroADXup   = ADX_UP   and ADX_DOWN[1] 
giroADXdown = ADX_DOWN and ADX_UP[1]

// Cambio de color Squeeze Momentum
SM_UP   = val > nz(val[1])
SM_DOWN = val < nz(val[1])

giroSMup   = SM_UP   and SM_DOWN[1]
giroSMdown = SM_DOWN and SM_UP[1]

long_condition  = (buycond  and giroSMup)   or (SM_UP   and buycross)
short_condition = (sellcond and giroSMdown) or (SM_DOWN and sellcross)
 
exit_long  = false
exit_short = false

// Lógica para Determinar EXIT
if ADX_exit and SM_exit and up_down_exit
    exit_long  := giroADXup or giroSMdown or exitbuy
    exit_short := giroADXdown or giroSMup or exitsell
else
    if ADX_exit and not SM_exit and up_down_exit
        exit_long  := giroADXup or exitbuy
        exit_short := giroADXdown or exitsell
    else 
        if ADX_exit and SM_exit and not up_down_exit
            exit_long  := giroADXup or giroSMdown
            exit_short := giroADXdown or giroSMup
        else
            if ADX_exit and not SM_exit and not up_down_exit
                exit_long  := giroADXup 
                exit_short := giroADXdown
            else
                if not ADX_exit and SM_exit and not up_down_exit
                    exit_long  := giroSMdown
                    exit_short := giroSMup
                else 
                    if not ADX_exit and not SM_exit and up_down_exit
                        exit_long  := exitbuy
                        exit_short := exitsell
                    else
                        if not ADX_exit and SM_exit and up_down_exit
                            exit_long  := exitbuy or giroSMdown
                            exit_short := exitsell or giroSMup
                        else
                            na
                            
inPosition    = strategy.position_size != 0 
noPosition    = strategy.position_size == 0 
longPosition  = strategy.position_size > 0 
shortPosition = strategy.position_size < 0
entryPrice    = strategy.position_avg_price

// Entry Exit Position

if long_condition 
    strategy.entry("Long", long=strategy.long)
    
if short_condition 
    strategy.entry("Short", long=strategy.short)

if longPosition and (noPosition[1] or shortPosition[1])
    a_label = plotlabel ? label.new(bar_index, norm_val > norm_sig ? norm_val + dist : norm_sig + dist, text="Long Entry", textcolor=color.new(color.white, 0), color=color.new(color.green, 0)) : na
    
if shortPosition and (noPosition[1] or longPosition[1])
    b_label = plotlabel ? label.new(bar_index, norm_val > norm_sig ? norm_val + dist : norm_sig + dist, text="Short Entry", textcolor=color.new(color.white, 0), color=color.new(color.red, 0)) : na    

strategy.close("Long",  when=exit_long)
strategy.close("Short", when=exit_short)

// Logica para configuracion de Stops y Profits

// Alcista

long_TP = entryPrice * (1 + long_TP_Input)
long_SL = entryPrice * (1 - long_SL_Input)
long_TS = low * (1 - long_TS_Input)

l_trailing_stop = 0.0
l_trailing_stop := if (longPosition)
    stopValue = long_TS
    max(l_trailing_stop[1], stopValue)
else 
    0 

if enable_TP
    if (enable_TS and not enable_SL)
        strategy.exit("Long TP & TS", "Long",   limit = long_TP, stop = l_trailing_stop)
    else
        if (enable_SL and not enable_TS)
            strategy.exit("Long TP & TS", "Long",   limit = long_TP, stop = long_SL)
        else 
            strategy.exit("Long TP & TS", "Long",   limit = long_TP)
else
    if not enable_TP 
        if (enable_TS and not enable_SL)
            strategy.exit("Long TP & TS", "Long",   stop = l_trailing_stop)
        else
            if (enable_SL and not enable_TS)
                strategy.exit("Long TP & TS", "Long",   stop = long_SL)

// Bajista

short_TP = entryPrice * (1 - sho_TP_Input)
short_SL = entryPrice * (1 + sho_SL_Input)
short_TS = high * (1 + sho_TS_Input)

s_trailing_stop   = 0.0
s_trailing_stop  := if shortPosition
    stopValue   = short_TS
    min(s_trailing_stop[1], stopValue)
else 
    999999

if enable_TP
    if (enable_TS and not enable_SL)
        strategy.exit("Long TP & TS", "Short",   limit = short_TP, stop = s_trailing_stop)
    else
        if (enable_SL and not enable_TS)
            strategy.exit("Long TP & TS", "Short",   limit = short_TP, stop = short_SL)
        else 
            strategy.exit("Long TP & TS", "Short",   limit = short_TP)
else
    if not enable_TP 
        if (enable_TS and not enable_SL)
            strategy.exit("Long TP & TS", "Short",   stop = s_trailing_stop)
        else
            if (enable_SL and not enable_TS)
                strategy.exit("Long TP & TS", "Short",   stop = short_SL)

plot(plottargets and enable_TP and longPosition ? long_TP : na, title="Long TP Level", color=color.green, style=plot.style_linebr, linewidth=2)
plot(plottargets and enable_SL and not enable_TS and longPosition ? long_SL : na, title="Long SL Level", color=color.red,   style=plot.style_linebr, linewidth=2)
plot(plottargets and enable_TS and not enable_SL and l_trailing_stop ? l_trailing_stop : na, title="Long TS Level", color=color.red, style=plot.style_linebr, linewidth=2)

plot(plottargets and enable_TP and shortPosition ? short_TP : na,      title="Short TP Level", color=color.new(color.green, 0), style=plot.style_linebr, linewidth=2)
plot(plottargets and enable_SL and not enable_TS and shortPosition ? short_SL : na,      title="Short SL Level", color=color.new(color.red,   0), style=plot.style_linebr, linewidth=2)
plot(plottargets and enable_TS and not enable_SL and shortPosition ? s_trailing_stop : na, title="Short TS Level", color=color.new(color.red,   0), style=plot.style_linebr, linewidth=2)